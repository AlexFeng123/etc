set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
" Let Vundle manage Vundle
Bundle 'gmarik/vundle'

 " Define bundles via Github repos
 Bundle 'christoomey/vim-run-interactive'
 "Bundle 'Valloric/YouCompleteMe'
 Bundle 'croaky/vim-colors-github'
 Bundle 'danro/rename.vim'
 "Bundle 'kchmck/vim-coffee-script'
 Bundle 'kien/ctrlp.vim'
 Bundle 'pbrisbin/vim-mkdir'
 Bundle 'scrooloose/syntastic'
 Bundle 'slim-template/vim-slim'
 Bundle 'thoughtbot/vim-rspec'
 Bundle 'tpope/vim-bundler'
 Bundle 'tpope/vim-endwise'
 Bundle 'tpope/vim-fugitive'
 Bundle 'tpope/vim-rails'
 Bundle 'tpope/vim-surround'
 Bundle 'vim-scripts/ctags.vim'
 Bundle 'vim-scripts/matchit.zip'
 Bundle 'vim-scripts/tComment'
 Bundle "mattn/emmet-vim"
 Bundle "scrooloose/nerdtree"
 Bundle "Lokaltog/vim-powerline"
 Bundle "godlygeek/tabular"
 Bundle "msanders/snipmate.vim"
 Bundle "altercation/vim-colors-solarized"
 Bundle "xsbeats/vim-blade"
 Bundle "Raimondi/delimitMate"
 Bundle "groenewege/vim-less"
 Bundle "evanmiller/nginx-vim-syntax"
 Bundle "Lokaltog/vim-easymotion"
 Bundle "tomasr/molokai"
 Bundle "Chiel92/vim-autoformat"
 Bundle 'scrooloose/nerdcommenter'
 Bundle 'majutsushi/tagbar'
 Bundle 'jistr/vim-nerdtree-tabs'
 Bundle 'taglist.vim' 
 if filereadable(expand("~/.vimrc.bundles.local"))
   source ~/.vimrc.bundles.local
   endif

   filetype on
" Use Vim settings, rather then Vi settings. This setting must be as early as
" possible, as it has side effects.
"set t_Co=256
""#python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup
map <F6> :Tlist
let Tlist_File_Fold_Auto_Close = 1 
let Tlist_Exit_OnlyWindow = 1 
let Tlist_WinWidth = 32 
let Tlist_Cags_Cmd = '/usr/bin/ctags'
" Highlight current line
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn
set cursorline cursorcolumn

" Leader
let mapleader = ","
set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=50
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set autowrite     " Automatically :write before running commands
set confirm       " Need confrimation while exit
set fileencodings=utf-8,gb18030,gbk,big5
set smarttab
set background=dark
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
      syntax on
endif

if filereadable(expand("~/.vimrc.bundles"))
     source ~/.vimrc.bundles
endif

filetype plugin indent on
nnoremap <silent><Leader><C-]> <C-w><C-]><C-w>T

"formate"
noremap <F4> :Autoformat<CR>
let g:formatdef_harttle = '"astyle --style=attach --pad-oper"'
let g:formatters_cpp = ['harttle']

map <F5> :NERDTreeTabsToggle<CR>

  set nu
  "tagbar
  nmap <F9> :TagbarToggle<CR>
" 启动时自动focus
let g:tagbar_autofocus = 1


  " will insert tab at beginning of line,
  " will use completion if not at beginning
  set wildmode=list:longest,list:full
  function! InsertTabWrapper()
      let col = col('.') - 1
          if !col || getline('.')[col - 1] !~ '\k'
                      return "\<tab>"
                          else
                      return "\<c-p>"
          endif
   endfunction
   

    inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
    inoremap <S-Tab> <c-n>

     " Index ctags from any project, including those outside Rails
     map <Leader>ct :!ctags -R .<CR>
     " Switch between the last two files
     nnoremap <leader><leader> <c-^>


     " Quicker window movement
     nnoremap <C-j> <C-w>j
     nnoremap <C-k> <C-w>k
     nnoremap <C-h> <C-w>h
     nnoremap <C-l> <C-w>l

     " configure syntastic syntax checking to check on open as well as save
     let g:syntastic_check_on_open=1


     " Search results high light
     set hlsearch

     " nohlsearch shortcut
     nmap -hl :nohlsearch<cr>
     nmap +hl :set hlsearch<cr>

     " Javascript syntax hightlight
     syntax enable
     " ctrap
     set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
     let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
     let g:cpp_class_scope_highlight = 1
     let g:cpp_experimental_template_highlight = 1
     set splitbelow
     set splitright

     " Local config
     if filereadable($HOME . "/.vimrc.local")
           source ~/.vimrc.local
      endif

